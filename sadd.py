# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import streamlit as st 
from sentence_transformers import SentenceTransformer
import chromadb
from llama_cpp import Llama


# -----------------------------------------------------------------------------
# --                              –°–µ–∫—Ü–∏—è –ø—É—Ç–µ–π                               --
# -----------------------------------------------------------------------------

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –¥–æ –ò–ò –º–æ–¥–µ–ª–µ–π
SentenceModelPath = "C:/AI-models/Embeddings/multilingual-e5-large" # –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–µ—Ä–∞
# model_full_path = "C:/AI-models/models/saiga/model-q4_K.gguf" # –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è NLP –º–æ–¥–µ–ª–∏
# model_full_path = "C:/AI-models/models/T-lite-instruct-0.1/T-lite-instruct-0.1.Q4_1.gguf" # –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è NLP –º–æ–¥–µ–ª–∏
model_full_path = "C:/AI-models/models/vihr/it-5.4-fp16-orpo-v2-Q4_1.gguf" # –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è NLP –º–æ–¥–µ–ª–∏

# –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_path = "C:/NPK-2/Bases/knowledge_base/"  # –ü—É—Ç—å –∫ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
collection_name = "knowledge_base_collection_microsoft"  # –ò–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö


# -----------------------------------------------------------------------------
# --                       –°–µ–∫—Ü–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç/–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö                        --
# -----------------------------------------------------------------------------

number_results=8 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö —á–∞–Ω–∫–æ–≤ –≤ –ø—Ä–æ–º–ø—Ç
distance=.4 # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
top_k=30
top_p=0.9
temperature=0.1
repeat_penalty=1.1

# –®–∞–±–ª–æ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≤–æ–ø—Ä–æ—Å–∞
PROMPT_TEMPLATE = """
–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –≠–û–° '–î–µ–ª–æ'. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –±–∞–∑–∏—Ä—É—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:

{context}

---

–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç: {question}
"""

# -----------------------------------------------------------------------------
# --                –°–µ–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –º–æ–¥–µ–ª–∏                  --
# -----------------------------------------------------------------------------
# –ø—Ä–µ—Ñ–∏–∫—Å @st.cache_resource –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ Streamlit –æ–º

@st.cache_resource
def initChroma(DB_path):     # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Chroma –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º (PersistentClient)
    chroma_client = chromadb.PersistentClient(path=DB_path)
    return chroma_client

@st.cache_resource
def initCollection():        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    collection = chroma_client.get_or_create_collection(name=collection_name)
    return collection

@st.cache_resource
def initSentenceModel():     # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—Ñ—ã —Å word embedding
    SentenceModel = SentenceTransformer(SentenceModelPath) 
    return SentenceModel

@st.cache_resource
def initModel():             # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
    model = Llama(
        model_path=model_full_path,
        n_ctx=8092,
        n_gpu_layers=-1, n_threads=32, n_batch=1024, 
        n_parts=1,
        verbose=False,
       )
    return model
    
# -----------------------------------------------------------------------------
# --                     –°–µ–∫—Ü–∏—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä                     --
# -----------------------------------------------------------------------------

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
def search_and_generate_prompt(question, collection, SentenceModel, distance_threshold, n_results=number_results):
    # –û—Ü–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
    query_embedding = SentenceModel.encode([question])[0].tolist()

    # –ó–∞–ø—Ä–æ—Å –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–∫–∏ –∫ –∑–∞–ø—Ä–æ—Å—É
    results = collection.query(
        query_embeddings=[query_embedding],  # –í–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞
        n_results=n_results  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    )
    print (results['distances'][0]) # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –ø–æ—Ä–æ–≥—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (distance_threshold)
    filtered_results = [
        (doc, metadata, dist) for doc, metadata, dist in zip(results['documents'][0], results['metadatas'][0], results['distances'][0]) if dist <= distance_threshold
    ]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if not filtered_results:
        return "–í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞—à–ª–æ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.", ""

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    context = " ".join([doc for doc, _, _ in filtered_results])

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞
    metadata_info = "  \n  ".join([
        f"File: {metadata['filename']}, Page: {metadata.get('page_number', 'N/A')}" 
        for _, metadata, _ in filtered_results if metadata is not None
    ])
 
    prompt = PROMPT_TEMPLATE.format(context=context, question=question)  # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≤–æ–ø—Ä–æ—Å–∞ –≤ —à–∞–±–ª–æ–Ω
    return prompt, metadata_info


# -----------------------------------------------------------------------------
# --                        –°–µ–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤                         --
# -----------------------------------------------------------------------------

def getAnswer(question):


    logging.info(f"Question: {question}.")



    prompt, metadata_info = search_and_generate_prompt(question, collection, SentenceModel, distance)
    logging.info(f"Prompt: {prompt}.")

    if "–í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞—à–ª–æ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏." in prompt:
        return prompt
    else:
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –º–æ–¥–µ–ª–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        logging.info(f"Prompt:{prompt}")
        completion  =  model.create_chat_completion(
            messages=[ {"role": "user", "content": prompt} ],
            temperature=temperature,
            top_k=top_k,
            top_p=top_p,
            repeat_penalty=repeat_penalty,
            stream=False)
        response = completion['choices'][0]['message']['content']
        logging.info(f"{response}–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:{metadata_info}")

        return f"{response}  \n  \n  **–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:**  \n  {metadata_info}"
    



import logging

logging.basicConfig(level=logging.INFO, filename="py_log.log",filemode="w",
                    format="%(asctime)s %(levelname)s %(message)s")
logging.info("–°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞")


# -----------------------------------------------------------------------------
# --                     –°–µ–∫—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–æ StreamLit                          --
# -----------------------------------------------------------------------------
st.set_page_config(
    page_title="–ò–ò –ø–µ—Å–æ—á–Ω–∏—Ü–∞",
    page_icon="üßä",
    layout="wide",
    initial_sidebar_state="expanded",
    )


chroma_client = initChroma(DB_path)
collection = initCollection()
SentenceModel = initSentenceModel()
model = initModel()

    
st.title("–ò–ò –ø–µ—Å–æ—á–Ω–∏—Ü–∞")
container = st.container(border=True) 

container.write("–≠—Ç–æ –ø–µ—Å–æ—á–Ω–∏—Ü–∞ –¥–ª—è –ù–ü–ö.")
if container.button("–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
    if "messages"  in st.session_state:
        st.session_state.messages = []

 


# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

    # Display chat messages from history on app rerun
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.write(message["content"])



        

    # React to user input
if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ –í–∞—à –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏:"):
    chat_prompt = f"**{prompt}**"
    # Display user message in chat message container
    st.chat_message("user").write(chat_prompt)
      

    # Add user message to chat history
    st.session_state.messages.append({"role": "user", "content": chat_prompt})

    response = getAnswer(prompt) # –≠—Ç–æ –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ - –æ–±–≤—è–∑–∫–∞!

    # Display assistant response in chat message container
    with st.chat_message("assistant"):
        st.write(response)
        
        #st.html(response)

    # Add assistant response to chat history
    st.session_state.messages.append({"role": "assistant", "content": response})

        
    

